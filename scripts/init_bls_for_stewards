#! /usr/bin/env python3

import argparse

import shutil

import os
from ledger.compact_merkle_tree import CompactMerkleTree
from plenum.common.config_util import getConfig
from plenum.common.keygen_utils import init_bls_keys
from plenum.common.ledger import Ledger
from plenum.common.script_helper import buildKeepDirIfNotExists
from plenum.persistence.leveldb_hash_store import LevelDbHashStore

config = getConfig()


def parse_args():
    parser = argparse.ArgumentParser(
        description="Generate BLS keys for a node "
                    "by taking the node's name and a seed "
                    "and send NODE txn with the BLS key specified")

    parser.add_argument('--name', required=True, help='node name')
    parser.add_argument('--seed', required=True, type=str,
                        help='seeds for keypair')

    args = parser.parse_args()

    return args.name, args.seed


def send_node_txn(bls_key, seed):
    ledger_data_dir = __get_ledger_dir(node_name)
    read_copy_ledger_data_dir = None
    try:
        read_copy_ledger_data_dir = __make_copy_of_ledger(ledger_data_dir)
        ledger = __get_ledger(read_copy_ledger_data_dir)
        node_txn = __get_stewards_node(ledger, seed)
        __send_node_txn(node_txn, bls_key, seed)
    finally:
        # TODO be careful about removing original the ledger data dir
        if read_copy_ledger_data_dir:
            shutil.rmtree(read_copy_ledger_data_dir)


def __get_stewards_node(ledger, seed):
    pass

def __send_node_txn(node_txn, bls_key):
    pass

def __make_copy_of_ledger(data_dir):
    read_copy_data_dir = data_dir + '-read-copy'
    if os.path.exists(read_copy_data_dir):
        shutil.rmtree(read_copy_data_dir)
    shutil.copytree(data_dir, read_copy_data_dir)
    return read_copy_data_dir

def __get_ledger(ledger_data_dir):
    config = getConfig()

    hash_store_name = 'pool'
    ledger_name = config.poolTransactionsFile

    hash_store = LevelDbHashStore(
        dataDir=ledger_data_dir,
        fileNamePrefix=hash_store_name)
    return Ledger(
        CompactMerkleTree(hashStore=hash_store),
        dataDir=ledger_data_dir,
        fileName=ledger_name)

def __get_ledger_dir(node_name):
    base_dir = config.baseDir
    data_dir = config.nodeDataDir
    ledger_data_dir = os.path.join(base_dir, config.nodeDataDir)
    if not os.path.exists(ledger_data_dir):
        # TODO: find a better way
        ledger_data_dir = os.path.join('/home/indy/.indy', data_dir)

    ledger_data_dir = os.path.join(ledger_data_dir, node_name)
    if not os.path.isdir(ledger_data_dir):
        print("Can not find the directory with the ledger : {}".format(
            ledger_data_dir))
        exit()

    return ledger_data_dir

if __name__ == "__main__":
    node_name, seed = parse_args()
    bls_key = init_bls_keys(config.baseDir, node_name, seed)
    send_node_txn(bls_key)
