#! /usr/bin/env python3

import argparse

from plenum.common.config_util import getConfig
from plenum.common.constants import BLS_KEY, ALIAS
from plenum.common.keygen_utils import init_bls_keys
from plenum.common.signer_did import DidSigner
from plenum.common.signer_simple import SimpleSigner
from plenum.test.helper import waitForSufficientRepliesForRequests
from stp_core.loop.looper import Looper
from stp_core.network.port_dispenser import genHa
from stp_core.types import HA

from indy_client.client.client import Client
from indy_client.client.wallet.node import Node
from indy_client.client.wallet.wallet import Wallet

config = getConfig()


def parse_args():
    parser = argparse.ArgumentParser(
        description="Generate BLS keys for a node "
                    "by taking the node's name and a seed "
                    "and send NODE txn with the BLS key specified")

    parser.add_argument('--name', required=True, help='node name')
    parser.add_argument('--node_seed', required=True, type=str,
                        help='seed for BLS key (the seed that was used to init Nodes)')
    parser.add_argument('--steward_seed', required=True, type=str,
                        help="Steward's seed used to generate Steward's DID")

    args = parser.parse_args()

    return args.name, args.node_seed, args.steward_seed


def send_node_txn(node_name, bls_key, steward_seed):
    port = genHa()[1]
    ha = HA('0.0.0.0', port)
    name = "steward_wallet"
    client = Client(name, ha=ha)

    wallet = Wallet(name)
    wallet.addIdentifier(signer=DidSigner(seed=steward_seed))

    with Looper() as looper:
        looper.add(client)
        print('Updating NYM with BLS keys...')
        reqs = __send_node_request(wallet, client,
                                   node_name, bls_key, steward_seed)
        waitForSufficientRepliesForRequests(looper, client, requests=reqs,
                                            customTimeoutPerReq=60)
        print('Succeffully updated NYM with BLS keys')


def __send_node_request(wallet, client, node_name, bls_key, steward_seed):
    nym = SimpleSigner(seed=steward_seed).identifier
    data = {}
    data[ALIAS] = node_name
    data[BLS_KEY] = bls_key

    node = Node(nym, data, nym)
    wallet.addNode(node)
    reqs = wallet.preparePending()
    return client.submitReqs(*reqs)[0]


if __name__ == "__main__":
    node_name, node_seed, steward_seed = parse_args()
    bls_key = init_bls_keys(config.baseDir, node_name, node_seed)
    send_node_txn(node_name, bls_key, steward_seed)
