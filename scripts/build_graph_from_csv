#! /usr/bin/env python3

"""
This script parses csv log file and builds a graph

Plot list: plot1/plot2/.../plotN

Plot: Title[,options]:graph1,graph2,...,graphN

Options:
    log - log scale Y axis

Graph:
    avg_metric           - average metric value in window
    min_metric           - minimum metric value in window
    max_metric           - maximum metric value in window
    lo_metric            - lower metric value within stddev range from average
    hi_metric            - higher metric value within stddev range from average
    tol_metric           - lo, avg, hi combined
    stats_metric         - min, lo, avg, hi, max combined
    metric_per_sec       - sum of metric values averaged over frame time
    metric_count_per_sec - number of metric events averaged over frame time
"""

from typing import List

from matplotlib import pyplot as plt
from collections import namedtuple
import pandas as pd
import argparse


def add_subplot(index, name, items, data, log_scale=False, show_timestamps=False):
    timestamp = list(map(lambda x: x.replace("2018-", ""), data.timestamp))
    numbers = range(len(timestamp))
    ax = plt.subplot(index)
    if log_scale:
        ax.set_yscale("log")
    for i in items:
        data_y_axis = data[i]
        plt.plot(numbers, data_y_axis, label=i)
        plt.xticks(numbers, timestamp)
        if show_timestamps:
            for label in list(
                    filter(lambda x: ax.xaxis.get_ticklabels().index(x) % 10 != 0, ax.xaxis.get_ticklabels())):
                label.set_visible(False)
        else:
            for label in ax.xaxis.get_ticklabels():
                label.set_visible(False)

        for label in list(filter(lambda x: ax.xaxis.get_major_ticks().index(x) % 10 != 0, ax.xaxis.get_major_ticks())):
            label.set_visible(False)
        plt.legend(bbox_to_anchor=(1, 1), loc=2, prop={'size': 8}, borderaxespad=0.)
        plt.title(name)
        plt.xticks(rotation=15)
        plt.tick_params(axis='x', which='minor')
        plt.gca().grid(True)


PlotInfo = namedtuple('GraphInfo', 'title log_scale items')


def parse_plot_info(text: str) -> PlotInfo:
    title, items = text.split(':')
    if ',' in title:
        params = title.split(',')
        title = params[0]
        params = params[1:]
    else:
        params = []
    items = items.split(',')
    all_items = []
    for item in items:
        if item.startswith('tol_'):
            base = item[4:]
            all_items.append('lo_{}'.format(base))
            all_items.append('avg_{}'.format(base))
            all_items.append('hi_{}'.format(base))
        elif item.startswith('stats_'):
            base = item[6:]
            all_items.append('min_{}'.format(base))
            all_items.append('lo_{}'.format(base))
            all_items.append('avg_{}'.format(base))
            all_items.append('hi_{}'.format(base))
            all_items.append('max_{}'.format(base))
        else:
            all_items.append(item)
    return PlotInfo(title=title, log_scale=('log' in params), items=all_items)


def parse_plot_list(text: str) -> List[PlotInfo]:
    return [parse_plot_info(s) for s in text.split('/')]


def build_graph():
    parser = argparse.ArgumentParser(description='Gets file path and graph name to build a graph')
    parser.add_argument('filepath', type=str, help='the csv file absolute path')
    parser.add_argument('--plots', required=False, help='plot list')
    args = parser.parse_args()
    file_path = args.filepath
    file = pd.read_csv(file_path)

    if args.plots:
        plot_list = parse_plot_list(args.plots)
    else:
        plot_list = [
            PlotInfo(title="Throughput", log_scale=False,
                     items=["client_stack_messages_processed_per_sec",
                            "ordered_batch_size_per_sec"]),
            PlotInfo(title="Latency", log_scale=False,
                     items=["avg_monitor_avg_latency",
                            "avg_backup_monitor_avg_latency"]),
            PlotInfo(title="Queues", log_scale=False,
                     items=["avg_node_stack_messages_processed",
                            "avg_client_stack_messages_processed"]),
            PlotInfo(title="Memory", log_scale=False,
                     items=["avg_node_rss_size"]),
            PlotInfo(title="Looper", log_scale=True,
                     items=["avg_looper_run_time_spent",
                            "avg_node_prod_time"])]

    idx = len(plot_list) * 100 + 11
    last_idx = len(plot_list) * 101 + 10
    for plot in plot_list:
        add_subplot(idx, plot.title, plot.items, file,
                    log_scale=plot.log_scale,
                    show_timestamps=(idx == last_idx))
        idx += 1

    mng = plt.get_current_fig_manager()
    mng.resize(*mng.window.maxsize())
    plt.gca().grid(True)
    plt.subplots_adjust(left=0.05, right=0.85)
    plt.suptitle(file_path)
    plt.show()


if __name__ == '__main__':
    build_graph()
